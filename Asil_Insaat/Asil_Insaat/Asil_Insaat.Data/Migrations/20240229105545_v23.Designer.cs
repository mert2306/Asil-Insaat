// <auto-generated />
using System;
using Asil_Insaat.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Asil_Insaat.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240229105545_v23")]
    partial class v23
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb50035e-53df-4510-84a0-1b52a5695df5"),
                            ConcurrencyStamp = "0c510fa1-147e-4601-84d4-b1c345c5e286",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("258ca24d-5f16-44a0-afcc-8dea4d026528"),
                            ConcurrencyStamp = "387f9abe-160c-4bb3-b36f-53531102d19d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyisim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ResimId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c15750cb-6fbe-4ea3-9a3c-c2b39afabf84",
                            Email = "mertcanasil3@gmail.com",
                            EmailConfirmed = true,
                            Isim = "Mertcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERTCANASIL3@GMAIL.COM",
                            NormalizedUserName = "MERTCANASIL3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECmgaLLPdBSXL1ODvRQcAcWOvX3lTjKFk8j1an44zuQu2HZJ46epu0LQLG66e6Jl7g==",
                            PhoneNumberConfirmed = false,
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SecurityStamp = "490edda7-ddd3-46c8-9d79-c4ee49ba7f30",
                            Soyisim = "Asıl",
                            TwoFactorEnabled = false,
                            UserName = "mertcanasil3@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40f1b26d-3672-49de-8b6b-7da8d7a0e3d5",
                            Email = "asilinsaatyapiyalitim@gmail.com",
                            EmailConfirmed = false,
                            Isim = "Vahit",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASILINSAATYAPIYALITIM@GMAIL.COM",
                            NormalizedUserName = "ASILINSAATYAPIYALITIM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9pldr5bnWHR9P7WowbCIFHpyjq7+iuKfAMroK+DlmbF+nZ+epznr2aK9D+z37mSA==",
                            PhoneNumberConfirmed = false,
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SecurityStamp = "70173239-fb6d-4304-a352-52e7e7acc288",
                            Soyisim = "Asil",
                            TwoFactorEnabled = false,
                            UserName = "asilinsaatyapiyalitim@gmail.com"
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660"),
                            RoleId = new Guid("bb50035e-53df-4510-84a0-1b52a5695df5")
                        },
                        new
                        {
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b"),
                            RoleId = new Guid("258ca24d-5f16-44a0-afcc-8dea4d026528")
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Kategori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Kategoris");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f8cad02-c349-423e-b688-688cda3f65f8"),
                            Isim = "Birinci",
                            OlusturulmaTarihi = new DateTime(2024, 2, 29, 13, 55, 44, 920, DateTimeKind.Local).AddTicks(6235),
                            Oluşturan = "Mertcan Asil",
                            SilinmisMi = false
                        },
                        new
                        {
                            Id = new Guid("b8a1c719-2d28-403b-b503-54497205ed6b"),
                            Isim = "Ikinci",
                            OlusturulmaTarihi = new DateTime(2024, 2, 29, 13, 55, 44, 920, DateTimeKind.Local).AddTicks(6240),
                            Oluşturan = "Vahit Asil",
                            SilinmisMi = false
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Resim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Resims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            FileName = "Images/testImages",
                            FileType = "jpg",
                            OlusturulmaTarihi = new DateTime(2024, 2, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Mertcan asil",
                            SilinmisMi = false
                        },
                        new
                        {
                            Id = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            FileName = "Images/AsiltestImages",
                            FileType = "png",
                            OlusturulmaTarihi = new DateTime(2024, 2, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Oluşturan = "Vahit asil",
                            SilinmisMi = false
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Yazi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DüzenlemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Düzenleyen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KategoriId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Oluşturan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Silen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SilinmisMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.HasIndex("ResimId");

                    b.HasIndex("UserId");

                    b.ToTable("Yazis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("409ce59f-2b79-4407-b0f4-ad66c4128b02"),
                            Baslik = "Mertcan",
                            Icerik = "Mertcan Deneme Makalesi Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            KategoriId = new Guid("9f8cad02-c349-423e-b688-688cda3f65f8"),
                            OlusturulmaTarihi = new DateTime(2024, 2, 29, 13, 55, 44, 939, DateTimeKind.Local).AddTicks(3453),
                            Oluşturan = "Mertcan Asil",
                            ResimId = new Guid("c70801ca-cc45-4079-83c6-b0da466bbabb"),
                            SilinmisMi = false,
                            UserId = new Guid("83314624-c7a0-4468-a6aa-1f2af06f4660")
                        },
                        new
                        {
                            Id = new Guid("49383f65-84ac-4ef8-8d53-e752daffd651"),
                            Baslik = "Mertcan",
                            Icerik = "Mertcan Deneme Makalesi Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            KategoriId = new Guid("b8a1c719-2d28-403b-b503-54497205ed6b"),
                            OlusturulmaTarihi = new DateTime(2024, 2, 29, 13, 55, 44, 939, DateTimeKind.Local).AddTicks(3462),
                            Oluşturan = "Vahit asil",
                            ResimId = new Guid("77e2d3f6-b7bf-4549-b7e2-7673d57586d6"),
                            SilinmisMi = false,
                            UserId = new Guid("bef76420-d441-4820-a5c0-5b39d62a8e0b")
                        });
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUser", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Users")
                        .HasForeignKey("ResimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resim");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Yazi", b =>
                {
                    b.HasOne("Asil_Insaat.Entity.Entities.Kategori", "Kategori")
                        .WithMany("Yazis")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asil_Insaat.Entity.Entities.Resim", "Resim")
                        .WithMany("Yazis")
                        .HasForeignKey("ResimId");

                    b.HasOne("Asil_Insaat.Entity.Entities.AppUser", "User")
                        .WithMany("Yazis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Resim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Yazis");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Kategori", b =>
                {
                    b.Navigation("Yazis");
                });

            modelBuilder.Entity("Asil_Insaat.Entity.Entities.Resim", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("Yazis");
                });
#pragma warning restore 612, 618
        }
    }
}
